Функция ПолучитьКомпоненту() Экспорт
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпоненту(КлиентКомпоненты) Тогда
		
		ПодключитьКомпоненту();
		ИнициализироватьКомпоненту(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции


Функция ИнициализироватьКомпоненту(Компонента) Экспорт
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПодключитьКомпоненту(КомпонентаПодключена = Неопределено) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("КомпонентаRMQ");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);

	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
КонецПроцедуры

Функция ПроверитьПодключение(КлиентКомпоненты, ДанныеПодключения) Экспорт
	
	Успешно  = Истина;
	Попытка
		КлиентКомпоненты.Connect(
				ДанныеПодключения.Адрес,
				ДанныеПодключения.Порт,
				ДанныеПодключения.Логин,
				ДанныеПодключения.Пароль,
				ДанныеПодключения.ВиртуальныйХост);
	Исключение
		Успешно  = Ложь;
	КонецПопытки;
	
	Возврат Успешно;
	
КонецФункции  

Функция ПодключитьИПроверитьПодключение(ДанныеПодключения) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпоненту();
	Успешно = ПроверитьПодключение(КлиентКомпоненты, ДанныеПодключения);

	Возврат Успешно;

КонецФункции 

Процедура ПодключитьИОтправитьСообщение(ДанныеПодключения) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпоненту();
	ОтправитьСообщение(КлиентКомпоненты, ДанныеПодключения);
	
КонецПроцедуры

Процедура ОтправитьСообщение(КлиентКомпоненты, ДанныеПодключения) Экспорт
	
	Попытка
		КлиентКомпоненты.Connect(
			ДанныеПодключения.Адрес,
			ДанныеПодключения.Порт,
			ДанныеПодключения.Логин,
			ДанныеПодключения.Пароль,
			ДанныеПодключения.ВиртуальныйХост);
		
		ТочкаОбмена    = ДанныеПодключения.ТочкаОбмена;
		ИмяОчереди     = ДанныеПодключения.ИмяОчереди;
		ТекстСообщения = ДанныеПодключения.ТекстСообщения;
		КлючМаршрутизации = ДанныеПодключения.КлючМаршрутизации;
		
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьСообщение(КлиентКомпоненты, ДанныеПодключения, ОчередьПустая, ОтветноеСообщение) Экспорт
	
	Попытка
		КлиентКомпоненты.Connect(
			ДанныеПодключения.Адрес,
			ДанныеПодключения.Порт,
			ДанныеПодключения.Логин,
			ДанныеПодключения.Пароль,
			ДанныеПодключения.ВиртуальныйХост);
		
		ИмяОчереди = ДанныеПодключения.ИмяОчереди;
		
		Попытка
			//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				ТекстСообщения = НСтр("ru='Очередь пустая!'"); 
				ОчередьПустая = Истина;
			КонецЕсли;
			//Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодключитьИПрочитатьСообщение(ДанныеПодключения) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпоненту();  
	ОчередьПустая = Ложь;
	КоличествоИтераций = 0;
	МаксКоличествоИтераций = 1000;
	Пока НЕ ОчередьПустая Цикл   
		Если КоличествоИтераций > МаксКоличествоИтераций Тогда Прервать; КонецЕсли;
		ОтветноеСообщение = "";
		ПрочитатьСообщение(КлиентКомпоненты, ДанныеПодключения,ОчередьПустая, ОтветноеСообщение);
		
		ОбщийСерверВызов.СоздатьПриказНаОтпускИзJSON(ОтветноеСообщение);
	
		КоличествоИтераций = КоличествоИтераций + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеПодключения(ВидПодключения) Экспорт
	
	ДанныеПодключения = Новый Структура();
	ДанныеПодключения.Вставить("Адрес",ВидПодключения.Адрес);
	ДанныеПодключения.Вставить("ВиртуальныйХост",ВидПодключения.ВиртуальныйХост);
	ДанныеПодключения.Вставить("КлючМаршрутизации",ВидПодключения.КлючМаршрутизации);
	ДанныеПодключения.Вставить("ИмяОчереди",ВидПодключения.ИмяОчереди);
	ДанныеПодключения.Вставить("Логин",ВидПодключения.Логин);
	ДанныеПодключения.Вставить("Пароль",ВидПодключения.Пароль); 
	ДанныеПодключения.Вставить("Порт",ВидПодключения.Порт);
    ДанныеПодключения.Вставить("ТочкаОбмена",ВидПодключения.ТочкаОбмена);
	
	Возврат ДанныеПодключения;
КонецФункции	
	